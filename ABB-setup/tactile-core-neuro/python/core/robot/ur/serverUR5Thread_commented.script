# Input Registers:
#     setp = double 0-5
#     setj = double 6-11
#     setTCPspeed = double 12
#     setJspeed = double 13
#     watchdog = int 0
#     opcode = int 1
#              0 = do nothing
#              1 = move linear
#              2 = move joints
#              3 = set tcp speed
#              4 = set joint speed

# Output Registers
#     int 0  = status (1=just finished doing something, 0=ready to do something)
#     int 1  = initial status? Doesn't use this! (1=waiting for instruction, 0=doing something)

# set params
set_tcp(p[0.0,0.0,0.1105,0.0,0.0,0.0])
set_payload(0.27, [0.0, 0.0, 0.09])
set_gravity([0.0, 0.0, 9.82])

# if no input update for 0.001Hz for reg 0 this will pause
rtde_set_watchdog("input_int_register_0", 0.001, "PAUSE")

# initialise tcp position variable
global q = get_actual_tcp_pose()

# initialise as letting comp know arm is ready to do stuff
write_output_integer_register(0,0)

# move to home position
global speedTCP = 0.03
global speedJoints = 0.05
global op_code = 0
movel([1.2927662733996899, -1.8118695446264619, 1.8709870416738177, -1.6295489610511362, -1.5591304626275218, -0.27512099977744064], a=0.07, v=speedTCP)

# define the thread for reading the registers
thread Thread_1():

    # not sure why there's 2 loops
    while (True):
      global q = get_actual_tcp_pose()

      while (True):

        # let comp know arm is ready to do stuff
        write_output_integer_register(0,0)

        # read what the comp wants the arm to do
        global op_code = read_input_integer_register(1)

        global temp= p[0,0,0,0,0,0] # not sure

        # read and convert all values from movelinear registers and set as global
        # variables to be used in main thread
        global x=read_input_float_register(0)
        global y=read_input_float_register(1)
        global z=read_input_float_register(2)
        global roll=read_input_float_register(3)
        global pitch=read_input_float_register(4)
        global yaw=read_input_float_register(5)
        global rpy=[roll,pitch,yaw]
        global k=rpy2rotvec(rpy)

        # not sure (think its to make sure registers were read correctly)
        temp=p[x,y,z,k[0],k[1],k[2]]
        if(temp != p[0,0,0,0,0,0]):
          global q = temp
        end

        # read and convert all values from moveljoint registers and set as global
        # variables to be used in main thread
        global j1=read_input_float_register(6)
        global j2=read_input_float_register(7)
        global j3=read_input_float_register(8)
        global j4=read_input_float_register(9)
        global j5=read_input_float_register(10)
        global j6=read_input_float_register(11)
        global joints = [j1,j2,j3,j4,j5,j6]

        # set the tcp speed global variable
        if op_code == 3:
          write_output_integer_register(0,0)
          global speedTCP = read_input_float_register(12)
          write_output_integer_register(0,1)
          sync()
        end

        # set the joint speed global variable
        if op_code == 4:
          write_output_integer_register(0,0)
          global speedJoints = read_input_float_register(13)
          write_output_integer_register(0,1)
          sync()
        end

        # reset so the comp knows arm is ready to do stuff
        write_output_integer_register(0,0)
        sync()
      end
      sync()
    end
    sync()
end

# start the register thread
threadId_Thread_1 = run Thread_1()

# infinite loop in main thread of program for controlling the robot
while (True):

    # no instruction from comp
    if op_code == 0:
      sync()
      continue

    # move linear requested by computer
    elif op_code == 1:
      write_output_integer_register(0,0)
      movel(q, a=0.7, v=speedTCP)
      write_output_integer_register(0,1) # finished doing move
      sync()

    # move joint requested by computer
    elif op_code == 2:
      write_output_integer_register(0,0)
      movej(joints, a=0.2, v=speedJoints)
      write_output_integer_register(0,1)  # finished doing move
      sync()

    # handled in register thread
    elif op_code == 3:
      sync()

    # handled in register thread
    elif op_code == 4:
      sync()

    else:
      popup("Invalid operation code")
      sync()

    end
    sync()
end
